name: Cleanup

on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      cleanup_type:
        description: 'Type of cleanup to perform'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'artifacts'
          - 'pre-releases'
          - 'workflow-runs'

permissions:
  contents: write
  actions: write

jobs:
  cleanup-artifacts:
    name: Cleanup Build Artifacts
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'artifacts' || github.event.inputs.cleanup_type == 'all' || github.event_name == 'schedule'
    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // Get all artifacts
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: owner,
              repo: repo,
              per_page: 100
            });
            
            // Calculate cutoff date (30 days ago)
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - 30);
            
            let deletedCount = 0;
            
            for (const artifact of artifacts.data.artifacts) {
              const artifactDate = new Date(artifact.created_at);
              
              if (artifactDate < cutoffDate) {
                try {
                  await github.rest.actions.deleteArtifact({
                    owner: owner,
                    repo: repo,
                    artifact_id: artifact.id
                  });
                  console.log(`Deleted artifact: ${artifact.name} (${artifact.created_at})`);
                  deletedCount++;
                } catch (error) {
                  console.log(`Failed to delete artifact ${artifact.name}: ${error.message}`);
                }
              }
            }
            
            console.log(`Deleted ${deletedCount} old artifacts`);

  cleanup-pre-releases:
    name: Cleanup Old Pre-releases
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'pre-releases' || github.event.inputs.cleanup_type == 'all' || github.event_name == 'schedule'
    steps:
      - name: Delete old pre-releases
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // Get all releases
            const releases = await github.rest.repos.listReleases({
              owner: owner,
              repo: repo,
              per_page: 100
            });
            
            // Calculate cutoff date (14 days ago for pre-releases)
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - 14);
            
            let deletedCount = 0;
            const keptReleases = [];
            
            // Sort pre-releases by date and keep only the 5 most recent
            const preReleases = releases.data
              .filter(release => release.prerelease)
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            
            for (let i = 0; i < preReleases.length; i++) {
              const release = preReleases[i];
              const releaseDate = new Date(release.created_at);
              
              // Keep the 5 most recent pre-releases, delete older ones
              if (i >= 5 || releaseDate < cutoffDate) {
                try {
                  // First delete the release
                  await github.rest.repos.deleteRelease({
                    owner: owner,
                    repo: repo,
                    release_id: release.id
                  });
                  
                  // Then delete the tag
                  try {
                    await github.rest.git.deleteRef({
                      owner: owner,
                      repo: repo,
                      ref: `tags/${release.tag_name}`
                    });
                  } catch (error) {
                    console.log(`Failed to delete tag ${release.tag_name}: ${error.message}`);
                  }
                  
                  console.log(`Deleted pre-release: ${release.tag_name} (${release.created_at})`);
                  deletedCount++;
                } catch (error) {
                  console.log(`Failed to delete pre-release ${release.tag_name}: ${error.message}`);
                }
              } else {
                keptReleases.push(release.tag_name);
              }
            }
            
            console.log(`Deleted ${deletedCount} old pre-releases`);
            console.log(`Kept pre-releases: ${keptReleases.join(', ')}`);

  cleanup-workflow-runs:
    name: Cleanup Old Workflow Runs
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'workflow-runs' || github.event.inputs.cleanup_type == 'all' || github.event_name == 'schedule'
    steps:
      - name: Delete old workflow runs
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // Get all workflows
            const workflows = await github.rest.actions.listRepoWorkflows({
              owner: owner,
              repo: repo
            });
            
            // Calculate cutoff date (90 days ago)
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - 90);
            
            let totalDeleted = 0;
            
            for (const workflow of workflows.data.workflows) {
              console.log(`Processing workflow: ${workflow.name}`);
              
              let page = 1;
              let hasMore = true;
              
              while (hasMore) {
                const runs = await github.rest.actions.listWorkflowRuns({
                  owner: owner,
                  repo: repo,
                  workflow_id: workflow.id,
                  page: page,
                  per_page: 100
                });
                
                if (runs.data.workflow_runs.length === 0) {
                  hasMore = false;
                  break;
                }
                
                let deletedInPage = 0;
                
                for (const run of runs.data.workflow_runs) {
                  const runDate = new Date(run.created_at);
                  
                  // Only delete old completed runs (keep recent ones and running ones)
                  if (runDate < cutoffDate && 
                      (run.status === 'completed' || run.status === 'cancelled')) {
                    try {
                      await github.rest.actions.deleteWorkflowRun({
                        owner: owner,
                        repo: repo,
                        run_id: run.id
                      });
                      deletedInPage++;
                      totalDeleted++;
                    } catch (error) {
                      console.log(`Failed to delete run ${run.id}: ${error.message}`);
                    }
                  }
                }
                
                console.log(`Deleted ${deletedInPage} runs from page ${page} of ${workflow.name}`);
                
                // If we didn't delete any runs in this page, no point in checking older pages
                if (deletedInPage === 0) {
                  hasMore = false;
                } else {
                  page++;
                }
                
                // Rate limiting - small delay between pages
                await new Promise(resolve => setTimeout(resolve, 100));
              }
            }
            
            console.log(`Total deleted workflow runs: ${totalDeleted}`);

  cleanup-docker-images:
    name: Cleanup Docker Images
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'all' || github.event_name == 'schedule'
    steps:
      - name: Delete untagged container images
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const packageName = context.repo.repo;
            
            try {
              // Get all package versions
              const versions = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                package_type: 'container',
                package_name: packageName,
                org: owner,
                per_page: 100
              });
              
              let deletedCount = 0;
              
              for (const version of versions.data) {
                // Delete untagged images older than 7 days
                if (version.metadata && version.metadata.container && 
                    version.metadata.container.tags.length === 0) {
                  
                  const versionDate = new Date(version.created_at);
                  const cutoffDate = new Date();
                  cutoffDate.setDate(cutoffDate.getDate() - 7);
                  
                  if (versionDate < cutoffDate) {
                    try {
                      await github.rest.packages.deletePackageVersionForOrg({
                        package_type: 'container',
                        package_name: packageName,
                        org: owner,
                        package_version_id: version.id
                      });
                      console.log(`Deleted untagged image: ${version.name}`);
                      deletedCount++;
                    } catch (error) {
                      console.log(`Failed to delete image ${version.name}: ${error.message}`);
                    }
                  }
                }
              }
              
              console.log(`Deleted ${deletedCount} untagged container images`);
              
            } catch (error) {
              if (error.status === 404) {
                console.log('No container packages found or insufficient permissions');
              } else {
                console.log(`Error cleaning up container images: ${error.message}`);
              }
            }

  summary:
    name: Cleanup Summary
    runs-on: ubuntu-latest
    needs: [cleanup-artifacts, cleanup-pre-releases, cleanup-workflow-runs, cleanup-docker-images]
    if: always()
    steps:
      - name: Create cleanup summary
        run: |
          echo "## 🧹 Cleanup Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Cleanup completed on $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Jobs Status:" >> $GITHUB_STEP_SUMMARY
          echo "- Artifacts: ${{ needs.cleanup-artifacts.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Pre-releases: ${{ needs.cleanup-pre-releases.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Workflow runs: ${{ needs.cleanup-workflow-runs.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker images: ${{ needs.cleanup-docker-images.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next scheduled cleanup: $(date -d 'next sunday 02:00' -u)" >> $GITHUB_STEP_SUMMARY