name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.result }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: release_notes
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^)
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          
          # Generate changelog
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md
          
          # Get commits between tags
          git log --pretty=format:"- %s (%h)" ${PREV_TAG}..HEAD >> release_notes.md
          
          # Set multiline output
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false

  build-and-upload:
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'

      - name: Get dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Set binary name
        id: binary_name
        run: |
          BINARY_NAME="ccproxy-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          echo "name=${BINARY_NAME}" >> $GITHUB_OUTPUT

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          go build -a -installsuffix cgo -ldflags="-w -s -X main.version=${{ github.ref_name }}" -o ${{ steps.binary_name.outputs.name }} ./cmd/proxy

      - name: Generate checksum
        run: |
          if [ "${{ matrix.goos }}" = "windows" ]; then
            sha256sum ${{ steps.binary_name.outputs.name }} > ${{ steps.binary_name.outputs.name }}.sha256
          else
            sha256sum ${{ steps.binary_name.outputs.name }} > ${{ steps.binary_name.outputs.name }}.sha256
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ steps.binary_name.outputs.name }}
          asset_name: ${{ steps.binary_name.outputs.name }}
          asset_content_type: application/octet-stream

      - name: Upload Checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ steps.binary_name.outputs.name }}.sha256
          asset_name: ${{ steps.binary_name.outputs.name }}.sha256
          asset_content_type: text/plain

  build-docker:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}

  create-checksums:
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    steps:
      - name: Download release assets
        run: |
          # Download all release assets
          curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}" | \
            jq -r '.assets[] | select(.name | test("ccproxy-.*")) | .browser_download_url' | \
            while read url; do
              curl -L -O "$url"
            done

      - name: Create combined checksums file
        run: |
          echo "# CCProxy ${{ github.ref_name }} Checksums" > checksums.txt
          echo "" >> checksums.txt
          echo "## SHA256 Checksums" >> checksums.txt
          echo "" >> checksums.txt
          for file in ccproxy-*; do
            if [[ ! "$file" == *.sha256 ]]; then
              sha256sum "$file" >> checksums.txt
            fi
          done

      - name: Upload combined checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain