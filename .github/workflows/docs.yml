name: Documentation

on:
  push:
    branches: [main]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'CLAUDE.md'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [main]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'CLAUDE.md'
      - '.github/workflows/docs.yml'
  workflow_dispatch:
    inputs:
      deploy_production:
        description: 'Deploy to production'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for git history

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: docs/package-lock.json

      - name: Install dependencies
        working-directory: docs
        run: npm ci

      - name: Build documentation
        working-directory: docs
        run: |
          # Set base URL for preview deployments
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            export VITE_BASE="/pr-${{ github.event.pull_request.number }}/"
            echo "Building preview for PR #${{ github.event.pull_request.number }}"
            echo "Base URL: $VITE_BASE"
          else
            export VITE_BASE="/"
            echo "Building for production"
          fi
          
          # Clean any existing build
          rm -rf .vitepress/dist
          
          # Show VitePress version
          npx vitepress --version || echo "VitePress version check failed"
          
          # Build the documentation (not dev server!)
          echo "Running: vitepress build"
          npx vitepress build --base="$VITE_BASE" || (echo "Build failed" && exit 1)
          
          # Verify build output
          if [ ! -d ".vitepress/dist" ]; then
            echo "Error: Build output directory not found"
            exit 1
          fi
          
          echo "Build completed successfully"
          ls -la .vitepress/dist
        env:
          GA_MEASUREMENT_ID: ${{ secrets.GA_MEASUREMENT_ID }}
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docs-build
          path: docs/.vitepress/dist
          retention-days: 7

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs-build
          path: dist

      - name: Deploy to Cloudflare Pages
        id: cloudflare
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy dist --project-name=ccproxy --branch=pr-${{ github.event.pull_request.number }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const deploymentUrl = `https://pr-${prNumber}.ccproxy.pages.dev`;
            
            // Check if we already commented
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ðŸ“š Documentation Preview')
            );
            
            const body = `ðŸ“š **Documentation Preview**\n\nYour documentation changes are available for preview:\nðŸ”— ${deploymentUrl}\n\nThis preview will be updated automatically with new commits.`;
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: body
              });
            }

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_production == 'true')
    environment:
      name: production
      url: https://ccproxy.orchestre.dev
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs-build
          path: dist

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy dist --project-name=ccproxy --branch=main
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Purge Cloudflare Cache
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'