name: Auto Release on Main

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: false
        default: 'auto'
        type: choice
        options:
        - auto
        - patch
        - minor
        - major

env:
  GO_VERSION: '1.23'

jobs:
  auto-release:
    name: Auto Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'chore(release):')"
    permissions:
      contents: write
      packages: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      released: ${{ steps.version.outputs.released }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        go mod download
        chmod +x scripts/version.sh

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Check for version bump needed
      id: check_version
      run: |
        # Get the version bump type
        VERSION_TYPE="${{ github.event.inputs.version_type || 'auto' }}"
        
        # Check if we need a version bump
        CURRENT_VERSION=$(./scripts/version.sh current)
        SUGGESTED_BUMP=$(./scripts/version.sh suggest | grep "Suggested bump:" | cut -d' ' -f3)
        
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "suggested_bump=$SUGGESTED_BUMP" >> $GITHUB_OUTPUT
        echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
        
        if [ "$VERSION_TYPE" = "auto" ] && [ "$SUGGESTED_BUMP" = "none" ]; then
          echo "needs_release=false" >> $GITHUB_OUTPUT
          echo "No version bump needed based on commits"
        else
          echo "needs_release=true" >> $GITHUB_OUTPUT
          echo "Version bump needed: $SUGGESTED_BUMP"
        fi

    - name: Validate conventional commits
      if: steps.check_version.outputs.needs_release == 'true'
      run: |
        ./scripts/version.sh check || {
          echo "::warning::Some commits don't follow conventional commit format"
          echo "This may affect automatic version detection"
        }


    - name: Bump version and create release commit
      id: version
      if: steps.check_version.outputs.needs_release == 'true'
      run: |
        VERSION_TYPE="${{ steps.check_version.outputs.version_type }}"
        
        # Bump version (capture stderr to see the messages)
        ./scripts/version.sh bump "$VERSION_TYPE" 2>&1
        
        # Get the new version from the version file
        NEW_VERSION=$(./scripts/version.sh current)
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "released=true" >> $GITHUB_OUTPUT
        
        echo "Bumped version to: $NEW_VERSION"

    - name: Push version commit and tag
      if: steps.check_version.outputs.needs_release == 'true'
      run: |
        git push origin main
        git push origin --tags

    - name: Build release artifacts
      if: steps.check_version.outputs.needs_release == 'true'
      run: |
        # Update Makefile to use the new version
        make build-all VERSION="${{ steps.version.outputs.version }}"

    - name: Generate detailed release notes
      id: release_notes
      if: steps.check_version.outputs.needs_release == 'true'
      run: |
        # Get the latest tag (which we just created)
        LATEST_TAG=$(git describe --tags --abbrev=0)
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 $LATEST_TAG^ 2>/dev/null || echo "")
        
        # Generate release notes
        cat > release_notes.md << 'EOF'
        ## 🚀 What's New
        
        This release includes the following changes:
        
        EOF
        
        # Get commits between tags
        if [ -n "$PREVIOUS_TAG" ]; then
          COMMIT_RANGE="${PREVIOUS_TAG}..${LATEST_TAG}"
        else
          COMMIT_RANGE="$LATEST_TAG"
        fi
        
        # Categorize commits
        echo "### ✨ Features" >> release_notes.md
        git log $COMMIT_RANGE --pretty=format:"- %s" --no-merges | grep -E "^- feat" | sed 's/^- feat[^:]*: /- /' >> release_notes.md || echo "- No new features" >> release_notes.md
        echo "" >> release_notes.md
        
        echo "### 🐛 Bug Fixes" >> release_notes.md
        git log $COMMIT_RANGE --pretty=format:"- %s" --no-merges | grep -E "^- fix" | sed 's/^- fix[^:]*: /- /' >> release_notes.md || echo "- No bug fixes" >> release_notes.md
        echo "" >> release_notes.md
        
        echo "### 📚 Documentation" >> release_notes.md
        git log $COMMIT_RANGE --pretty=format:"- %s" --no-merges | grep -E "^- docs" | sed 's/^- docs[^:]*: /- /' >> release_notes.md || echo "- No documentation changes" >> release_notes.md
        echo "" >> release_notes.md
        
        echo "### 🔧 Other Changes" >> release_notes.md
        git log $COMMIT_RANGE --pretty=format:"- %s" --no-merges | grep -vE "^- (feat|fix|docs)" >> release_notes.md || echo "- No other changes" >> release_notes.md
        echo "" >> release_notes.md
        
        # Add installation instructions
        cat >> release_notes.md << 'EOF'
        ## 📦 Installation
        
        ### Quick Install (macOS/Linux)
        ```bash
        curl -sSL https://github.com/orchestre-dev/ccproxy/releases/download/v${{ steps.version.outputs.version }}/ccproxy-$(uname -s | tr '[:upper:]' '[:lower:]')-$(uname -m | sed 's/x86_64/amd64/').tar.gz | tar xz
        sudo mv ccproxy /usr/local/bin/
        ccproxy --version
        ```
        
        ### Windows
        Download the Windows executable from the assets below and add it to your PATH.
        
        ## 🔒 Verification
        
        All release assets are signed and include SHA256 checksums for verification.
        
        ## 📋 Full Changelog
        
        **Full Changelog**: https://github.com/orchestre-dev/ccproxy/compare/${PREVIOUS_TAG}...v${{ steps.version.outputs.version }}
        EOF
        
        # Output the release notes for use in the release
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      if: steps.check_version.outputs.needs_release == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        files: |
          build/*
        draft: false
        prerelease: false
        generate_release_notes: true

    - name: Output summary
      if: steps.check_version.outputs.needs_release == 'true'
      run: |
        echo "## 🎉 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: v${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Release URL**: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commits included**: $(git rev-list --count $(git describe --tags --abbrev=0 HEAD^)..HEAD 2>/dev/null || echo 'All commits')" >> $GITHUB_STEP_SUMMARY

    - name: No release needed
      if: steps.check_version.outputs.needs_release == 'false'
      run: |
        echo "## ℹ️ No Release Needed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "No conventional commits requiring a version bump were found since the last release." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Current version**: ${{ steps.check_version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY

