name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  e2e-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        go: ['1.22.x', '1.23.x']
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: go mod download
    
    - name: Build CCProxy
      run: go build -v ./cmd/ccproxy
    
    - name: Run E2E tests with safety
      env:
        CCPROXY_TEST_MODE: "1"
        CCPROXY_SPAWN_DEPTH: "0"
      run: |
        # Store PIDs of any ccproxy processes we start
        CCPROXY_PIDS=""
        
        # Function to cleanup ccproxy processes
        cleanup_ccproxy() {
          if [ -n "$CCPROXY_PIDS" ]; then
            for pid in $CCPROXY_PIDS; do
              if kill -0 "$pid" 2>/dev/null; then
                echo "Stopping ccproxy process $pid"
                kill "$pid" 2>/dev/null || true
                # Give it time to gracefully shutdown
                sleep 1
                # Force kill if still running
                kill -9 "$pid" 2>/dev/null || true
              fi
            done
          fi
          # Final cleanup for any orphaned processes
          pkill -x "ccproxy" || true
        }
        
        # Set trap to cleanup on exit
        trap cleanup_ccproxy EXIT
        
        # Run integration tests if they exist
        if [ -d "./tests" ]; then
          go test -v ./tests/... -count=1 -parallel=1 -timeout=10m
        else
          # Run all tests as E2E since no dedicated E2E directory exists
          go test -v ./... -count=1 -parallel=1 -timeout=10m -tags=integration
        fi
    
    - name: Check for leaked processes
      if: always()
      run: |
        if pgrep -f "ccproxy"; then
          echo "::warning::CCProxy processes still running after tests"
          ps aux | grep ccproxy | grep -v grep || true
          pkill -f "ccproxy" || true
        fi